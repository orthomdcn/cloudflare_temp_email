name: Deploy Backend

on:
  workflow_run:
    workflows: [Upstream Sync]
    types: [completed]
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Deploy Backend
        # 这里是修正的部分：
        # 1. 移除了那行错误的 `${{ toJSON(secrets) }}`
        # 2. 只保留 wrangler CLI 需要的显式环境变量
        # 3. 其他 secrets 会由 Github Actions 自动注入到脚本环境中，无需在此列出
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # --- 1. 检查必需的 Secrets ---
          MANDATORY_SECRETS=(
            "DOMAINS"
            "JWT_SECRET"
            "ADMIN_PASSWORDS"
            "DB_DATABASE_NAME"
            "DB_DATABASE_ID"
          )
          for secret in "${MANDATORY_SECRETS[@]}"; do
            # 从环境中通过变量名间接读取 secret 的值
            if [ -z "${!secret}" ]; then
              echo "❌ 错误：必需的 secret [$secret] 未设置！请在仓库的 Actions secrets 中添加它。"
              exit 1
            fi
          done
          echo "✅ 所有必需的 secret 都已设置。"

          # --- 2. 动态生成 wrangler.toml ---
          cd worker/

          # 写入 wrangler.toml 的静态部分和必需的变量
          cat << EOF > wrangler.toml
          name = "cloudflare_temp_email"
          main = "src/worker.ts"
          compatibility_date = "2025-04-01"
          compatibility_flags = [ "nodejs_compat" ]

          [[d1_databases]]
          binding = "DB"
          database_name = "${DB_DATABASE_NAME}"
          database_id = "${DB_DATABASE_ID}"

          [vars]
          DOMAINS = '${DOMAINS}'
          JWT_SECRET = "${JWT_SECRET}"
          ADMIN_PASSWORDS = '${ADMIN_PASSWORDS}'
          EOF

          # --- 3. 动态添加可选变量 ---
          # 通过 secrets context 获取所有 secret 的 key
          echo '${{ toJSON(secrets) }}' | jq -r 'keys[]' | while read -r secret_key; do
            # 排除必需变量和 Github 自动添加的变量
            if [[ ! " ${MANDATORY_SECRETS[*]} " =~ " ${secret_key} " ]] && [[ "$secret_key" != "GITHUB_TOKEN" ]] && [[ ! "$secret_key" == CLOUDFLARE_* ]]; then
              value="${!secret_key}"
              if [ -n "$value" ]; then
                echo "找到可选 secret: $secret_key, 正在添加到 wrangler.toml..."
                # 根据值的类型决定是否加引号
                if [[ "$value" == "true" ]] || [[ "$value" == "false" ]] || [[ "$value" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
                  echo "$secret_key = $value" >> wrangler.toml
                elif [[ "$value" == "["* || "$value" == "{"* ]]; then
                  echo "$secret_key = '$value'" >> wrangler.toml
                else
                  escaped_value=$(echo "$value" | sed 's/"/\\"/g')
                  echo "$secret_key = \"$escaped_value\"" >> wrangler.toml
                fi
              fi
            fi
          done

          echo "--- 生成的 wrangler.toml 内容如下 ---"
          cat wrangler.toml
          echo "------------------------------------"

          # --- 4. 安装依赖并部署 ---
          if [ -n "${{ env.USE_WORKER_ASSETS }}" ]; then
            cd ../frontend/
            pnpm install --no-frozen-lockfile
            if [ -n "${{ env.USE_WORKER_ASSETS_WITH_TELEGRAM }}" ]; then
              pnpm build:telegram:pages
            else
              pnpm build:pages
            fi
            cd ../worker/
          fi

          pnpm install --no-frozen-lockfile
          
          if [ -n "${{ env.BACKEND_USE_MAIL_WASM_PARSER }}" ]; then
            pnpm add mail-parser-wasm-worker
            git apply ../.github/config/mail-parser-wasm-worker.patch
          fi

          pnpm run deploy
          echo "🚀 部署成功！"
