name: Deploy Backend

on:
  workflow_run:
    workflows: [Upstream Sync]
    types: [completed]
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Deploy Backend for ${{ github.ref_name }}
        run: |
          export use_worker_assets=${{ secrets.USE_WORKER_ASSETS }}
          export use_worker_assets_with_telegram=${{ secrets.USE_WORKER_ASSETS_WITH_TELEGRAM }}
          if [ -n "$use_worker_assets" ]; then
            cd frontend/
            pnpm install --no-frozen-lockfile
            if [ -n "$use_worker_assets_with_telegram" ]; then
              echo "Building with telegram pages"
              pnpm build:telegram:pages
            else
              echo "Building with normal pages"
              pnpm build:pages
            fi
            cd ..
          fi

          export debug_mode=${{ secrets.DEBUG_MODE }}
          export use_mail_wasm_parser=${{ secrets.BACKEND_USE_MAIL_WASM_PARSER }}
          cd worker/

          # 从模板创建 wrangler.toml
          cp wrangler.toml.template wrangler.toml

          # 检查必选的 secrets
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ] || \
             [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ] || \
             [ -z "${{ secrets.DATABASE_ID }}" ] || \
             [ -z "${{ secrets.DATABASE_NAME }}" ] || \
             [ -z "${{ secrets.DOMAINS }}" ] || \
             [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "错误：一个或多个必选的 secrets 未设置。"
            echo "请确保 CLOUDFLARE_ACCOUNT_ID, CLOUDFLARE_API_TOKEN, DATABASE_ID, DATABASE_NAME, DOMAINS, 和 JWT_SECRET 都已配置。"
            exit 1
          fi

          # 如果 KV_ID 存在，则添加 KV 绑定
          if [ -n "${{ secrets.KV_ID }}" ]; then
            echo "" >> wrangler.toml
            echo "[[kv_namespaces]]" >> wrangler.toml
            echo "binding = \"KV\"" >> wrangler.toml
            echo "id = \"${{ secrets.KV_ID }}\"" >> wrangler.toml
          fi

          # 开始向 wrangler.toml 添加 D1 数据库绑定
          echo "" >> wrangler.toml
          echo "[[d1_databases]]" >> wrangler.toml
          echo "binding = \"DB\"" >> wrangler.toml
          echo "database_name = \"${{ secrets.DATABASE_NAME }}\"" >> wrangler.toml
          echo "database_id = \"${{ secrets.DATABASE_ID }}\"" >> wrangler.toml

          # 开始向 [vars] 部分添加变量
          echo "" >> wrangler.toml
          echo "[vars]" >> wrangler.toml

          # 所有可能的变量列表
          all_vars="PREFIX RANDOM_LEN DOMAINS JWT_SECRET ADMIN_PASSWORDS ENABLE_USER_CREATE_EMAIL ENABLE_USER_LOGIN ENABLE_ADMIN_CONTACT ADMIN_CONTACT ENABLE_TELEGRAM_BOT TELEGRAM_TOKEN TELEGRAM_BOT_NAME TELEGRAM_WHITELIST ENABLE_MAIL_WEBHOOK MAIL_WEBHOOK_URL ENABLE_ABUSE_REPORT ABUSE_REPORT_EMAIL ENABLE_CLEANUP CLEANUP_DAYS S3_ACCESS_KEY_ID S3_SECRET_ACCESS_KEY S3_ENDPOINT S3_BUCKET S3_REGION ENABLE_AUTO_REPLY BLOCK_LIST ENABLE_TURNSTILE TURNSTILE_SECRET_KEY ENABLE_ADS ADS_CODE ALLOW_SENDER_LIST DISALLOW_SENDER_LIST ENABLE_USER_BIND_EMAIL FORWARDING_EMAIL CUSTOM_TITLE CUSTOM_DESCRIPTION CUSTOM_KEYWORDS CUSTOM_FAVICON OAUTH2_CLIENT_ID OAUTH2_CLIENT_SECRET OAUTH2_REDIRECT_URI OAUTH2_PROVIDER OAUTH2_AUTH_URL OAUTH2_TOKEN_URL OAUTH2_USER_INFO_URL OAUTH2_USERNAME_FIELD"

          for var_name in $all_vars; do
            secret_value=$(eval echo "\$${var_name}")
            if [ -n "$secret_value" ]; then
              echo "$var_name = $secret_value" >> wrangler.toml
            fi
          done

          pnpm install --no-frozen-lockfile

          if [ -n "$use_mail_wasm_parser" ]; then
            echo "Using mail-parser-wasm-worker"
            pnpm add mail-parser-wasm-worker
            git apply ../.github/config/mail-parser-wasm-worker.patch
            echo "Applied mail-parser-wasm-worker patch"
          fi

          if [ "$debug_mode" = "true" ]; then
            pnpm run deploy
          else
            output=$(pnpm run deploy 2>&1)
            if [ $? -ne 0 ]; then
                code=$?
                echo "Command failed with exit code $code"
                exit $code
            fi
          fi
          echo "Deployed for tag ${{ github.ref_name }}"
        env:
          # 将所有 secrets 注入环境变量以供脚本读取
          ${{ toJSON(secrets) }}
