name: Deploy Backend

on:
  workflow_run:
    workflows: [Upstream Sync]
    types: [completed]
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Build and Deploy Backend
        env:
          # 将所有 secrets 注入到环境变量中，以便脚本可以访问
          ${{ toJSON(secrets) }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # --- 1. 检查必需的 Secrets ---
          # 这个检查现在更加直接和可靠
          if [ -z "${{ secrets.DOMAINS }}" ] || \
             [ -z "${{ secrets.JWT_SECRET }}" ] || \
             [ -z "${{ secrets.ADMIN_PASSWORDS }}" ] || \
             [ -z "${{ secrets.DB_DATABASE_NAME }}" ] || \
             [ -z "${{ secrets.DB_DATABASE_ID }}" ]; then
            echo "❌ 错误：一个或多个必需的 secret 未设置或为空！"
            echo "请在仓库的 'Settings' -> 'Secrets and variables' -> 'Actions' 中检查以下必需的 secrets 是否都已正确设置："
            echo "- DOMAINS"
            echo "- JWT_SECRET"
            echo "- ADMIN_PASSWORDS"
            echo "- DB_DATABASE_NAME"
            echo "- DB_DATABASE_ID"
            exit 1
          fi
          echo "✅ 所有必需的 secret 都已设置。"

          # --- 2. 动态生成 wrangler.toml ---
          cd worker/

          # 写入 wrangler.toml 的静态部分和必需的变量
          cat << EOF > wrangler.toml
          name = "cloudflare_temp_email"
          main = "src/worker.ts"
          compatibility_date = "2025-04-01"
          compatibility_flags = [ "nodejs_compat" ]

          [[d1_databases]]
          binding = "DB"
          database_name = "${{ secrets.DB_DATABASE_NAME }}"
          database_id = "${{ secrets.DB_DATABASE_ID }}"

          [vars]
          DOMAINS = '${{ secrets.DOMAINS }}'
          JWT_SECRET = "${{ secrets.JWT_SECRET }}"
          ADMIN_PASSWORDS = '${{ secrets.ADMIN_PASSWORDS }}'
          EOF

          # --- 3. 动态添加可选变量 ---
          # 此处直接使用 env 上下文，更加稳定
          MANDATORY_SECRETS_LIST="DOMAINS JWT_SECRET ADMIN_PASSWORDS DB_DATABASE_NAME DB_DATABASE_ID GITHUB_TOKEN CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_API_TOKEN"
          
          echo '${{ toJSON(secrets) }}' | jq -r 'keys[]' | while read -r secret_key; do
            if [[ ! " $MANDATORY_SECRETS_LIST " =~ " ${secret_key} " ]]; then
              # 从环境变量中获取 secret 的值
              value="${!secret_key}"
              if [ -n "$value" ]; then
                echo "找到可选 secret: $secret_key, 正在添加到 wrangler.toml..."
                if [[ "$value" == "true" ]] || [[ "$value" == "false" ]] || [[ "$value" =~ ^-?[0-9]+(\.[0-9]+)?$ ]]; then
                  echo "$secret_key = $value" >> wrangler.toml
                elif [[ "$value" == "["* || "$value" == "{"* ]]; then
                  echo "$secret_key = '$value'" >> wrangler.toml
                else
                  escaped_value=$(echo "$value" | sed 's/"/\\"/g')
                  echo "$secret_key = \"$escaped_value\"" >> wrangler.toml
                fi
              fi
            fi
          done

          echo "--- 生成的 wrangler.toml 内容如下 ---"
          cat wrangler.toml
          echo "------------------------------------"

          # --- 4. 安装依赖并部署 ---
          if [ -n "${USE_WORKER_ASSETS}" ]; then
            cd ../frontend/
            pnpm install --no-frozen-lockfile
            if [ -n "${USE_WORKER_ASSETS_WITH_TELEGRAM}" ]; then
              pnpm build:telegram:pages
            else
              pnpm build:pages
            fi
            cd ../worker/
          fi

          pnpm install --no-frozen-lockfile
          
          if [ -n "${BACKEND_USE_MAIL_WASM_PARSER}" ]; then
            pnpm add mail-parser-wasm-worker
            git apply ../.github/config/mail-parser-wasm-worker.patch
          fi

          pnpm run deploy
          echo "🚀 部署成功！"

