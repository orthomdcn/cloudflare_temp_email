name: Deploy Backend

on:
  workflow_run:
    workflows: [Upstream Sync]
    types: [completed]
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Deploy Backend for ${{ github.ref_name }}
        env:
          # 将所有需要的 Secrets 显式映射为环境变量
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          DATABASE_ID: ${{ secrets.DATABASE_ID }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DOMAINS: ${{ secrets.DOMAINS }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KV_ID: ${{ secrets.KV_ID }}
          PREFIX: ${{ secrets.PREFIX }}
          RANDOM_LEN: ${{ secrets.RANDOM_LEN }}
          ADMIN_PASSWORDS: ${{ secrets.ADMIN_PASSWORDS }}
          ENABLE_USER_CREATE_EMAIL: ${{ secrets.ENABLE_USER_CREATE_EMAIL }}
          ENABLE_USER_LOGIN: ${{ secrets.ENABLE_USER_LOGIN }}
          ENABLE_ADMIN_CONTACT: ${{ secrets.ENABLE_ADMIN_CONTACT }}
          ADMIN_CONTACT: ${{ secrets.ADMIN_CONTACT }}
          ENABLE_TELEGRAM_BOT: ${{ secrets.ENABLE_TELEGRAM_BOT }}
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_BOT_NAME: ${{ secrets.TELEGRAM_BOT_NAME }}
          TELEGRAM_WHITELIST: ${{ secrets.TELEGRAM_WHITELIST }}
          ENABLE_MAIL_WEBHOOK: ${{ secrets.ENABLE_MAIL_WEBHOOK }}
          MAIL_WEBHOOK_URL: ${{ secrets.MAIL_WEBHOOK_URL }}
          ENABLE_ABUSE_REPORT: ${{ secrets.ENABLE_ABUSE_REPORT }}
          ABUSE_REPORT_EMAIL: ${{ secrets.ABUSE_REPORT_EMAIL }}
          ENABLE_CLEANUP: ${{ secrets.ENABLE_CLEANUP }}
          CLEANUP_DAYS: ${{ secrets.CLEANUP_DAYS }}
          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          S3_REGION: ${{ secrets.S3_REGION }}
          ENABLE_AUTO_REPLY: ${{ secrets.ENABLE_AUTO_REPLY }}
          BLOCK_LIST: ${{ secrets.BLOCK_LIST }}
          ENABLE_TURNSTILE: ${{ secrets.ENABLE_TURNSTILE }}
          TURNSTILE_SECRET_KEY: ${{ secrets.TURNSTILE_SECRET_KEY }}
          ENABLE_ADS: ${{ secrets.ENABLE_ADS }}
          ADS_CODE: ${{ secrets.ADS_CODE }}
          ALLOW_SENDER_LIST: ${{ secrets.ALLOW_SENDER_LIST }}
          DISALLOW_SENDER_LIST: ${{ secrets.DISALLOW_SENDER_LIST }}
          ENABLE_USER_BIND_EMAIL: ${{ secrets.ENABLE_USER_BIND_EMAIL }}
          FORWARDING_EMAIL: ${{ secrets.FORWARDING_EMAIL }}
          CUSTOM_TITLE: ${{ secrets.CUSTOM_TITLE }}
          CUSTOM_DESCRIPTION: ${{ secrets.CUSTOM_DESCRIPTION }}
          CUSTOM_KEYWORDS: ${{ secrets.CUSTOM_KEYWORDS }}
          CUSTOM_FAVICON: ${{ secrets.CUSTOM_FAVICON }}
          OAUTH2_CLIENT_ID: ${{ secrets.OAUTH2_CLIENT_ID }}
          OAUTH2_CLIENT_SECRET: ${{ secrets.OAUTH2_CLIENT_SECRET }}
          OAUTH2_REDIRECT_URI: ${{ secrets.OAUTH2_REDIRECT_URI }}
          OAUTH2_PROVIDER: ${{ secrets.OAUTH2_PROVIDER }}
          OAUTH2_AUTH_URL: ${{ secrets.OAUTH2_AUTH_URL }}
          OAUTH2_TOKEN_URL: ${{ secrets.OAUTH2_TOKEN_URL }}
          OAUTH2_USER_INFO_URL: ${{ secrets.OAUTH2_USER_INFO_URL }}
          OAUTH2_USERNAME_FIELD: ${{ secrets.OAUTH2_USERNAME_FIELD }}
          USE_WORKER_ASSETS: ${{ secrets.USE_WORKER_ASSETS }}
          USE_WORKER_ASSETS_WITH_TELEGRAM: ${{ secrets.USE_WORKER_ASSETS_WITH_TELEGRAM }}
          DEBUG_MODE: ${{ secrets.DEBUG_MODE }}
          BACKEND_USE_MAIL_WASM_PARSER: ${{ secrets.BACKEND_USE_MAIL_WASM_PARSER }}
        run: |
          set -e # 如果任何命令失败，立即退出
          # 前端构建
          if [ -n "$USE_WORKER_ASSETS" ]; then
            cd frontend/
            pnpm install --no-frozen-lockfile
            if [ -n "$USE_WORKER_ASSETS_WITH_TELEGRAM" ]; then
              pnpm build:telegram:pages
            else
              pnpm build:pages
            fi
            cd ..
          fi
          # 后端部署
          cd worker/
          cp wrangler.toml.template wrangler.toml
          
          # --- 关键修复：移除模板中的所有占位配置，防止重复 ---
          sed -i '/^\[\[d1_databases\]\]/,/database_id =/d' wrangler.toml
          sed -i '/^\[\[kv_namespaces\]\]/,/id =/d' wrangler.toml
          sed -i '/^\[vars\]/d' wrangler.toml

          # 检查必选 secrets
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ] || [ -z "$CLOUDFLARE_API_TOKEN" ] || [ -z "$DATABASE_ID" ] || [ -z "$DATABASE_NAME" ] || [ -z "$DOMAINS" ] || [ -z "$JWT_SECRET" ]; then
            echo "::error::一个或多个必选的 secrets 未设置。"
            exit 1
          fi
          
          # 动态添加 KV 绑定
          if [ -n "$KV_ID" ]; then
            echo "" >> wrangler.toml
            echo "[[kv_namespaces]]" >> wrangler.toml
            echo "binding = \"KV\"" >> wrangler.toml
            echo "id = \"$KV_ID\"" >> wrangler.toml
          fi
          
          # 动态添加 D1 数据库绑定
          echo "" >> wrangler.toml
          echo "[[d1_databases]]" >> wrangler.toml
          echo "binding = \"DB\"" >> wrangler.toml
          echo "database_name = \"$DATABASE_NAME\"" >> wrangler.toml
          echo "database_id = \"$DATABASE_ID\"" >> wrangler.toml

          # 动态添加 [vars]
          echo "" >> wrangler.toml
          echo "[vars]" >> wrangler.toml
          all_vars="PREFIX RANDOM_LEN DOMAINS JWT_SECRET ADMIN_PASSWORDS ENABLE_USER_CREATE_EMAIL ENABLE_USER_LOGIN ENABLE_ADMIN_CONTACT ADMIN_CONTACT ENABLE_TELEGRAM_BOT TELEGRAM_TOKEN TELEGRAM_BOT_NAME TELEGRAM_WHITELIST ENABLE_MAIL_WEBHOOK MAIL_WEBHOOK_URL ENABLE_ABUSE_REPORT ABUSE_REPORT_EMAIL ENABLE_CLEANUP CLEANUP_DAYS S3_ACCESS_KEY_ID S3_SECRET_ACCESS_KEY S3_ENDPOINT S3_BUCKET S3_REGION ENABLE_AUTO_REPLY BLOCK_LIST ENABLE_TURNSTILE TURNSTILE_SECRET_KEY ENABLE_ADS ADS_CODE ALLOW_SENDER_LIST DISALLOW_SENDER_LIST ENABLE_USER_BIND_EMAIL FORWARDING_EMAIL CUSTOM_TITLE CUSTOM_DESCRIPTION CUSTOM_KEYWORDS CUSTOM_FAVICON OAUTH2_CLIENT_ID OAUTH2_CLIENT_SECRET OAUTH2_REDIRECT_URI OAUTH2_PROVIDER OAUTH2_AUTH_URL OAUTH2_TOKEN_URL OAUTH2_USER_INFO_URL OAUTH2_USERNAME_FIELD"
          for var_name in $all_vars; do
            secret_value=$(printenv "$var_name" || true)
            if [ -n "$secret_value" ]; then
              echo "$var_name = $secret_value" >> wrangler.toml
            fi
          done

          echo "--- Final Generated wrangler.toml ---"
          cat wrangler.toml
          echo "-----------------------------------"
          
          pnpm install --no-frozen-lockfile
          if [ -n "$BACKEND_USE_MAIL_WASM_PARSER" ]; then
            pnpm add mail-parser-wasm-worker
            git apply ../.github/config/mail-parser-wasm-worker.patch
          fi

          echo "Deploying worker..."
          # 更健壮的错误捕获和日志打印
          if ! output=$(pnpm run deploy 2>&1); then
              echo "::error::Deployment command failed!"
              echo "--- Wrangler Error Output ---"
              echo "$output"
              echo "---------------------------"
              exit 1
          else
              echo "--- Wrangler Success Output ---"
              echo "$output"
              echo "-----------------------------"
              echo "Deployed for tag ${{ github.ref_name }}"
          fi
